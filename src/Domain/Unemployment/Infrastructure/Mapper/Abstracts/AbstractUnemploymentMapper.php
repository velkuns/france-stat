<?php

/*
 * Copyright (c) Romain Cottard
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Application\Domain\Unemployment\Infrastructure\Mapper\Abstracts;

use Eureka\Component\Database\ConnectionFactory;
use Eureka\Component\Orm\RepositoryInterface;
use Eureka\Component\Orm\Traits;
use Eureka\Component\Validation\Entity\ValidatorEntityFactory;
use Eureka\Component\Validation\ValidatorFactoryInterface;
use Application\Domain\Unemployment\Entity\Unemployment;
use Application\Domain\Unemployment\Repository\UnemploymentRepositoryInterface;
use Psr\Cache\CacheItemPoolInterface;
use Application\Domain\Unemployment\Infrastructure\Mapper\UnemploymentValueMapper;

/**
 * Abstract Unemployment mapper class.
 *
 * /!\ AUTO GENERATED FILE. DO NOT EDIT THIS FILE.
 * You can add your specific code in child class: UnemploymentMapper
 *
 * @author Eureka Orm Generator
 */
abstract class AbstractUnemploymentMapper
{
    /** @use Traits\CacheAwareTrait<UnemploymentRepositoryInterface, Unemployment> */
    use Traits\CacheAwareTrait;
    use Traits\ConnectionAwareTrait;
    /** @use Traits\EntityAwareTrait<Unemployment> */
    use Traits\EntityAwareTrait;
    /** @use Traits\MapperTrait<UnemploymentRepositoryInterface, Unemployment> */
    use Traits\MapperTrait;
    use Traits\TableTrait;
    use Traits\ValidatorAwareTrait;

    /**
     * @param array<class-string, RepositoryInterface> $mappers
     */
    public function __construct(
        string $connectionName,
        ConnectionFactory $connectionFactory,
        ValidatorFactoryInterface|null $validatorFactory = null,
        ValidatorEntityFactory|null $validatorEntityFactory = null,
        array $mappers = [],
        CacheItemPoolInterface|null $cache = null,
        bool $enableCacheOnRead = false,
    ) {
        $this->setConnectionName($connectionName);
        $this->setConnectionFactory($connectionFactory);
        $this->setCache($cache);
        $this->setValidatorFactories($validatorFactory, $validatorEntityFactory);

        $this->addMappers($mappers);

        if ($enableCacheOnRead) {
            $this->enableCacheOnRead();
        }

        $this->initialize();
    }

    /**
     * Initialize mapper with proper values for mapped table.
     */
    protected function initialize(): void
    {
        $this->setEntityClass(Unemployment::class);
        $this->setTable('unemployment');

        $this->initializeFields();
        $this->initializeMapping();
        $this->initializeValidatorConfig();
        $this->initializeJoinConfigs();
    }

    protected function initializeFields(): void
    {
        $this->setFields([
            'unemployment_id',
            'unemployment_group_id',
            'gender_id',
            'unemployment_age_range',
            'unemployment_is_metropolitan',
            'unemployment_is_rate',
            'unemployment_graph_id',
        ]);

        $this->setPrimaryKeys([
            'unemployment_id',
        ]);
    }

    protected function initializeMapping(): void
    {
        $this->setNamesMap([
            'unemployment_id' => [
                'get'      => 'getId',
                'set'      => 'setId',
                'property' => 'id',
            ],
            'unemployment_group_id' => [
                'get'      => 'getGroupId',
                'set'      => 'setGroupId',
                'property' => 'groupId',
            ],
            'gender_id' => [
                'get'      => 'getGenderId',
                'set'      => 'setGenderId',
                'property' => 'genderId',
            ],
            'unemployment_age_range' => [
                'get'      => 'getAgeRange',
                'set'      => 'setAgeRange',
                'property' => 'ageRange',
            ],
            'unemployment_is_metropolitan' => [
                'get'      => 'isMetropolitan',
                'set'      => 'setIsMetropolitan',
                'property' => 'isMetropolitan',
            ],
            'unemployment_is_rate' => [
                'get'      => 'isRate',
                'set'      => 'setIsRate',
                'property' => 'isRate',
            ],
            'unemployment_graph_id' => [
                'get'      => 'getGraphId',
                'set'      => 'setGraphId',
                'property' => 'graphId',
            ],
        ]);
    }

    protected function initializeValidatorConfig(): void
    {
        $this->setValidatorConfig([
            'unemployment_id' => [
                'type'      => 'integer',
                'options'   => ['min_range' => 0, 'max_range' => 4294967295],
            ],
            'unemployment_group_id' => [
                'type'      => 'integer',
                'options'   => ['min_range' => 0, 'max_range' => 255],
            ],
            'gender_id' => [
                'type'      => 'integer',
                'options'   => ['min_range' => 0, 'max_range' => 255],
            ],
            'unemployment_age_range' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 6],
            ],
            'unemployment_is_metropolitan' => [
                'type'      => 'boolean',
                'options'   => [],
            ],
            'unemployment_is_rate' => [
                'type'      => 'boolean',
                'options'   => [],
            ],
            'unemployment_graph_id' => [
                'type'      => 'integer',
                'options'   => ['min_range' => 0, 'max_range' => 65535],
            ],
        ]);
    }

    protected function initializeJoinConfigs(): void
    {
        $this->setJoinConfigs([
            'Values' => [
                'mapper'   => UnemploymentValueMapper::class,
                'type'     => 'INNER',
                'relation' => 'many',
                'keys'     => ['unemployment_id' => true],
            ],
        ]);
    }
}
